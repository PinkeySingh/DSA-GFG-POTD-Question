class Solution {
    public int maxCircularSum(int arr[]) {
        int n = arr.length;

        // Step 1: Standard Kadane's Algorithm for non-circular case
        int max_kadane = kadane(arr);

        // Step 2: Compute total array sum
        int total = 0;
        for (int i = 0; i < n; i++) {
            total += arr[i];
            arr[i] = -arr[i]; // Invert the array elements for min sum
        }

        // Step 3: Modified Kadane on inverted array for min subarray sum
        int max_inverse_kadane = kadane(arr);
        int max_wrap = total + max_inverse_kadane; // total - (-min_subarray)

        // Step 4: Handle all-negative case
        if (max_wrap == 0) {
            return max_kadane;
        }

        // Step 5: Return maximum of wrapped and non-wrapped
        return Math.max(max_kadane, max_wrap);
    }

    private int kadane(int[] arr) {
        int max_current = arr[0];
        int max_global = arr[0];

        for (int i = 1; i < arr.length; i++) {
            max_current = Math.max(arr[i], max_current + arr[i]);
            max_global = Math.max(max_global, max_current);
        }

        return max_global;
    }
}
