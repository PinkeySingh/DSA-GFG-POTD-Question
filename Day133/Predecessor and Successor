/* BST Node
class Node {
    int data;
    Node left, right;
    Node(int x) {
        data = x;
        left = right = null;
    }
} */

class Solution {
     private void inorder(Node root, ArrayList<Node> result) {
        if (root == null) {
            return;
        }
        inorder(root.left, result);           // Traverse left subtree
        result.add(root);                     // Visit current node
        inorder(root.right, result);          // Traverse right subtree
    }
    public ArrayList<Node> findPreSuc(Node root, int key) {
        // code here
         ArrayList<Node> result = new ArrayList<>(); // Stores inorder traversal result

        inorder(root, result);                      // Fill the list with inorder traversal

        Node pre = null;                            // Pointer to store predecessor
        Node suc = null;                            // Pointer to store successor

        for (int i = 0; i < result.size(); i++) {
            if (result.get(i).data < key) {
                pre = result.get(i);                // Keep updating predecessor until key is found
            } else if (result.get(i).data > key) {
                suc = result.get(i);                // First greater element after key is the successor
                break;
            } else {
                if (i - 1 >= 0) {
                    pre = result.get(i - 1);        // Element before key is predecessor
                }
                if (i + 1 < result.size()) {
                    suc = result.get(i + 1);        // Element after key is successor
                }
                break;                              // Break after finding key
            }
        }

        ArrayList<Node> ans = new ArrayList<>();
        ans.add(pre);                               // Add predecessor
        ans.add(suc);                               // Add successor
        return ans;          
    }
}
