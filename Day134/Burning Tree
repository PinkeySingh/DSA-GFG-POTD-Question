class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}  */
class Solution {
    
     private static void markParents(Node root, Map<Node, Node> parentMap, Node targetHolder[]) {
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            Node curr = queue.poll();

            if (curr.data == targetHolder[0].data) {
                targetHolder[0] = curr;
            }

            if (curr.left != null) {
                parentMap.put(curr.left, curr);
                queue.add(curr.left);
            }
            if (curr.right != null) {
                parentMap.put(curr.right, curr);
                queue.add(curr.right);
            }
        }
    }
    
    public static int minTime(Node root, int target) {
        // code here
        Map<Node, Node> parentMap = new HashMap<>();
        Node[] targetNode = new Node[]{new Node(target)}; 
        markParents(root, parentMap, targetNode);

        Queue<Node> queue = new LinkedList<>();
        Set<Node> visited = new HashSet<>();

        queue.add(targetNode[0]);
        visited.add(targetNode[0]);

        int time = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();
            boolean burned = false;

            for (int i = 0; i < size; i++) {
                Node curr = queue.poll();

                if (curr.left != null && !visited.contains(curr.left)) {
                    queue.add(curr.left);
                    visited.add(curr.left);
                    burned = true;
                }

                if (curr.right != null && !visited.contains(curr.right)) {
                    queue.add(curr.right);
                    visited.add(curr.right);
                    burned = true;
                }

                if (parentMap.containsKey(curr) && !visited.contains(parentMap.get(curr))) {
                    queue.add(parentMap.get(curr));
                    visited.add(parentMap.get(curr));
                    burned = true;
                }
            }

            if (burned) time++;
        }

        return time;
    }
}
