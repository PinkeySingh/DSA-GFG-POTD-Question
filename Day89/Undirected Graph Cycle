class Solution {
    
    private boolean Edges(int start, List<List<Integer>> adj, int[] vis) {
        vis[start] = 1;
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{-1, start}); 

        while (!q.isEmpty()) {
            int[] pair = q.poll();
            int parent = pair[0];
            int node = pair[1];

            for (int neighbor : adj.get(node)) {
                if (vis[neighbor] == 0) {
                    vis[neighbor] = 1;
                    q.offer(new int[]{node, neighbor});
                } else if (neighbor != parent) {
                    return true; 
                }
            }
        }
        return false;
    }

    public boolean isCycle(int V, int[][] edges) {
        // Code here
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }

        int[] vis = new int[V]; 

        for (int i = 0; i < V; i++) {
            if (vis[i] == 0) {
                if (Edges(i, adj, vis)) {
                    return true; 
                }
            }
        }
        return false; 
    }
}
