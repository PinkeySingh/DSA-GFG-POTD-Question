class Solution {
    
      private static void dfs(int node, boolean[] visited, ArrayList<Integer> result, List<List<Integer>> adj) {
        visited[node] = true;
        for (int neighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, visited, result, adj);
            }
        }
        result.add(node);
    }
    public static ArrayList<Integer> topoSort(int V, int[][] edges) {
        // code here
         List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
        }

        boolean[] visited = new boolean[V];
        ArrayList<Integer> result = new ArrayList<>();

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                dfs(i, visited, result, adj);
            }
        }

        Collections.reverse(result);
        return result;
        
    }
}
