class Solution {
    public int powerfulInteger(int[][] intervals, int k) {
        // code here
       TreeMap<Integer, Integer> map = new TreeMap<>();

        for (int[] interval : intervals) {
            int start = interval[0];
            int end = interval[1];

            map.put(start, map.getOrDefault(start, 0) + 1);
            map.put(end + 1, map.getOrDefault(end + 1, 0) - 1);
        }

        int active = 0;          
        int lastPos = -1;        
        int maxPowerful = -1;    

        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int pos = entry.getKey();

            if (active >= k && lastPos != -1) {
                maxPowerful = Math.max(maxPowerful, pos - 1);
            }

            active += entry.getValue();  
            lastPos = pos;
        }

        return maxPowerful; 
    }
}
