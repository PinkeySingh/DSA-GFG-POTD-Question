class Solution {
    public int sumOfModes(int[] arr, int k) {
        // code here
         int n = arr.length;
        if (k > n) return 0;

        Map<Integer, Integer> freq = new HashMap<>();
     
        TreeMap<Integer, TreeSet<Integer>> freqMap = new TreeMap<>();

        java.util.function.Consumer<Integer> add = (num) -> {
            int oldFreq = freq.getOrDefault(num, 0);
            int newFreq = oldFreq + 1;
            freq.put(num, newFreq);

            if (oldFreq > 0) {
                TreeSet<Integer> set = freqMap.get(oldFreq);
                set.remove(num);
                if (set.isEmpty()) freqMap.remove(oldFreq);
            }

            freqMap.computeIfAbsent(newFreq, x -> new TreeSet<>()).add(num);
        };

        java.util.function.Consumer<Integer> remove = (num) -> {
            int oldFreq = freq.get(num);
            int newFreq = oldFreq - 1;

            TreeSet<Integer> set = freqMap.get(oldFreq);
            set.remove(num);
            if (set.isEmpty()) freqMap.remove(oldFreq);

            if (newFreq > 0) {
                freq.put(num, newFreq);
                freqMap.computeIfAbsent(newFreq, x -> new TreeSet<>()).add(num);
            } else {
                freq.remove(num);
            }
        };

        int sum = 0;

        for (int i = 0; i < k; i++) add.accept(arr[i]);
        int maxFreq = freqMap.lastKey();
        int mode = freqMap.get(maxFreq).first();
        sum += mode;

        for (int i = k; i < n; i++) {
            add.accept(arr[i]);
            remove.accept(arr[i - k]);

            maxFreq = freqMap.lastKey();
            mode = freqMap.get(maxFreq).first();
            sum += mode;
        }

        return sum;
    }
}
