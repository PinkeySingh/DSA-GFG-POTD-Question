class Solution {
    static int time = 0;
    private static void dfs(int u, int parent, int[] disc, int[] low, boolean[] vis,
                            boolean[] isArticulation, ArrayList<ArrayList<Integer>> adj) {
        vis[u] = true;
        disc[u] = low[u] = ++time;
        int children = 0;

        for (int v : adj.get(u)) {
            if (v == parent) continue;
            if (!vis[v]) {
                children++;
                dfs(v, u, disc, low, vis, isArticulation, adj);
                low[u] = Math.min(low[u], low[v]);

                if (parent != -1 && low[v] >= disc[u]) {
                    isArticulation[u] = true;
                }

                if (parent == -1 && children > 1) {
                    isArticulation[u] = true;
                }
            } else {
                low[u] = Math.min(low[u], disc[v]);
            }
        }
    }
    static ArrayList<Integer> articulationPoints(int V, int[][] edges) {
        // code here
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }

        int[] disc = new int[V];
        int[] low = new int[V];
        boolean[] vis = new boolean[V];
        boolean[] isArticulation = new boolean[V];
        time = 0; 

        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                dfs(i, -1, disc, low, vis, isArticulation, adj);
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            if (isArticulation[i]) result.add(i);
        }

        if (result.isEmpty()) result.add(-1);
        return result;
        
    }
}
