class Solution {
  public int maxMinHeight(int[] arr, int k, int w) {
        int n = arr.length;
        int low = Integer.MAX_VALUE;
        int high = Integer.MIN_VALUE;

        for (int h : arr) {
            low = Math.min(low, h);
            high = Math.max(high, h);
        }

        high += k;  
        int ans = low;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (isPossible(arr, n, k, w, mid)) {
                ans = mid;      
                low = mid + 1;
            } else {
                high = mid - 1; 
            }
        }

        return ans;
    }

    private boolean isPossible(int[] arr, int n, int k, int w, int target) {
        int[] diff = new int[n + 2]; 
        int used = 0;
        int currAdd = 0;

        for (int i = 0; i < n; i++) {
            currAdd += diff[i];

            int currHeight = arr[i] + currAdd;

            if (currHeight < target) {
                int need = target - currHeight;

                if (used + need > k) return false;

                used += need;
                currAdd += need;

                if (i + w < diff.length) {
                    diff[i + w] -= need; 
                }
            }
        }

        return true;
    }
}
